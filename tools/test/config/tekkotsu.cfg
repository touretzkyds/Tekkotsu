##################################################################
######################   Tekkotsu config   #######################
##################################################################
##################### $Name:  $ ######################
####################### $Revision: 1.1 $ ########################
################## $Date: 2007/01/30 22:56:26 $ ##################
##################################################################
#
# Format:
#
# * Comments are any line beginning with '#'
#
# * Model specific regions can be denoted with <MODELNAME>...</MODELNAME>
#   - Wildcards can also be used: <ERS-2*>...</ERS-2*>
#   - Anything not within a model region is read by all models (i.e. <*>..</*>)
#   - Don't get fancy with the "tags" - one per line, the parser's not that smart
#     (feel free to hack it if you want - it's in Config.cc)
#
# * Sections are demarcated with [SECTIONNAME]
#   - A section is only ended by another section beginning
#   - Section transitions within a model region will only be read by that model
#   - Section names are case insensitive
#
# * Otherwise, each line is interpreted as: variable=value
#   - this should correspond to Config::curSectionName_config::variable
#   - interpretation is up to the code in Config.cc
#   - some variables are lists (additional assignments push on the list),
#     others are simply overwritten if a new value is assigned.
#   - variable names are case insensitive
#
# * You can override these at run time from the Controller using the command:
#   !set section_name.variable=value
#   - Of course, whether or not the new value will be picked up depends on
#     how it is being used...
#
# * Paths are assumed to be relative to the project/ms/ directory.
#   For example, this file would be referenced as config/tekkotsu.cfg
#
##################################################################



##################################################################
##################################################################
[Wireless]
##################################################################
##################################################################
# unique id for Aibo (not used by Tekkotsu, but you might want it...)
id=1



##################################################################
##################################################################
[Vision]
##################################################################
##################################################################

# white_balance  indoor | flourescent | outdoor
<ERS-2*>
white_balance=flourescent
</ERS-2*>
<ERS-7>
white_balance=indoor
</ERS-7>

# gain           low | mid | high
# higher gain will brighten the image, but increases noise
gain=mid

# shutter_speed  slow | mid | fast
# slower shutter will brighten image, but increases motion blur
<ERS-2*>
shutter_speed=mid
</ERS-2*>
<ERS-7>
shutter_speed=slow
</ERS-7>

# resolution     quarter | half | full
# this is the resolution vision's object recognition system will run at
resolution=full


### Color Segmentation Threshold files ###
# Threshold (.tm) files define the mapping from full color to indexed color
# You can uncomment more than one of these - they will be loaded into
# separate channels of the segmenter.  The only cost of loading multiple
# threshold files is memory - the CPU cost of performing segmentation is
# only done if/when the channel is actually accessed.

# Included options for color threshold file:
<ERS-2*>
# 210pb.tm - pink and blue
# 210phb.tm - pink, skin (hand), and blue
#   note: "skin" is just of people who work in our lab - not a general sampling... :(
# 210genrl.tm - general colors for the ERS-210
# ball.tm - standard Sony pink ball definition
thresh=config/210phb.tm
thresh=config/210genrl.tm
thresh=config/ball.tm
</ERS-2*>
<ERS-7>
# 7general.tm - a general classification of a variety of colors for the ERS-7
# 7red.tm - just a very broad pink/red/purple => "pink" color detection
# ball.tm - standard Sony pink ball definition
thresh=config/7general.tm
</ERS-7>

# the .col file gives names and a "typical" color for display
# the indexes numbers it contains correspond to indexes in the .tm file
# This file is common to all .tm files -- when doing new color segmentations,
# make sure you define colors in the same order as listed here!
colors=config/default.col


### Image Streaming Format ###
# These parameters control the video stream over wireless ethernet
# transport can be either 'udp' or 'tcp'
rawcam_port=10011
rawcam_transport=udp
segcam_port=10012
segcam_transport=udp
region_port=10013
region_transport=tcp

# pause between raw image grabs: 0 for fast-as-possible, 100 for 10 FPS, etc
# in milliseconds
segcam_interval=0

# rawcam_encoding   color | y_only | uv_only | u_only | v_only | y_dx_only | y_dy_only | y_dxdy_only
rawcam_encoding=color

# compression       none | jpeg
rawcam_compression=jpeg

# quality of jpeg compression 0-100
rawcam_compress_quality=85

# pause between raw image grabs: 0 for fast-as-possible, 100 for 10 FPS
# in milliseconds
rawcam_interval=0

# apparently someone at sony thinks it's a good idea to replace some
# pixels in each camera image with information like the frame number
# and CDT count.  if non-zero, will replace those pixels with the
# actual image pixel value in RawCamGenerator
restore_image=1

# When true, this will fill in the CMVision::color_class_state::total_area
# field for each color following region labeling.  If false, the total_area
# will stay 0 (or whatever the last value was), but you save a little CPU.
region_calc_total=1;

# jpeg algorithm: 'islow' (integer, slow, but quality), 'ifast' (integer, fast, but rough), 'float' (floating point)
jpeg_dct_method=ifast

# log_2 of number of pixels to skip, 0 sends reconstructed double
#   resolution (mainly useful for Y channel, others are just resampled)
#   our eyes are more sensitive to intensity (y channel) so you might
#   want to send the UV channels at a lower resolution (higher skip) as
#   a form of compression
# rawcam_y_skip is used when in sending single channel, regardless of
#   which channel
# valid values are 0-5
rawcam_y_skip=2
rawcam_uv_skip=3

# you can send the original segmented image
# or an RLE compressed version (which includes some noise removal)
#segcam_compression   none | rle
segcam_compression=rle

# this is the channel of the seg cam which should be sent.
# corresponds to the index of the .tm file you want in thresh
segcam_channel=0

# this is the log_2 of pixels to skip when sending
# segmented camera images, same idea as rawcam_*_skip
segcam_skip=1

# this is the log_2 of pixels to skip when sending Region information,
# same idea as rawcam_*_skip (added by nvh 21-04-05)
regioncam_skip=1


### Camera Calibration ###
# see Config::vision_config::{computeRay,computePixel} to convert
# between world coordinates and pixel coordinates using these values
  
# focal length (in pixels)
focal_len_x = 198.807
focal_len_y = 200.333
  
# center of optical projection (in pixels)
principle_point_x = 102.689
principle_point_y = 85.0399
  
# skew of CCD
skew = 0
  
# Radial distortion terms
kc1_r2 = -0.147005
kc2_r4 = 0.38485
kc5_r6 = 0
  
# Tangential distortion terms
kc3_tan1 = -0.00347777
kc4_tan2 = 0.00012873

# resolution at which calibration images were taken
calibration_res_x = 208
calibration_res_y = 160


##################################################################
##################################################################
[Main]
##################################################################
##################################################################

# if non-zero, will call srand() with a high-precision timestamp, mangled by sensor data
seed_rng=1

# this mode parameter determines how input on console_port is handled
# 'controller' will pass it as input to the Controller (assumes same syntax as ControllerGUI)
# 'textmsg' will broadcast it as a TextMsgEvent (textmsgEGID)
# 'auto' is the original mode, which uses 'textmsg' if the ControllerGUI is connected, and 'controller' otherwise
consoleMode=controller
console_port=10001

stderr_port=10002
error_level=0
debug_level=0
verbose_level=0
wsjoints_port=10031
wspids_port=10032
walkControl_port=10050
aibo3d_port=10051
headControl_port=10052
estopControl_port=10053
#stewart_port=10055
wmmonitor_port=10061
use_VT100=true
# pause between writes: 0 for fast-as-possible, 100 for 10 FPS, etc.
# in milliseconds
#worldState_interval=0


##################################################################
##################################################################
[Behaviors]
##################################################################
##################################################################

### FlashIPAddrBehavior ###

# You probably already know the first 3 bytes for your network
# so you might only want the last byte for brevity
# (valid values are 1 through 4)
flash_bytes=4

# Do you want to automatically trigger this on boot?
# Will use a priority of kEmergencyPriority+1 in order to override
# the emergency stop's status animation
flash_on_start=0


# your-stuff-here?

##################################################################
##################################################################
[Controller]
##################################################################
##################################################################
gui_port=10020
select_snd=whiip.wav
next_snd=toc.wav
prev_snd=tick.wav
read_snd=ping.wav
cancel_snd=whoop.wav
error_snd=fart.wav



##################################################################
##################################################################
[Motion]
##################################################################
##################################################################

# Any motion related paths which are not absolute (i.e. do not
# start with '/') will be assumed to be relative to this directory
root=data/motion

# This is the default set of walk parameters
walk=walk.prm

# The file specified by "kinematics" should define the kinematic
# chains which form your robot.
# "kinematic_chains" lists the names of the chains which should be
# loaded from that file
<ERS-2*>
<ERS-210>
kinematics=/config/ers210.kin
kinematic_chains=Body
kinematic_chains=Mouth
</ERS-210>
<ERS-220>
kinematics=/config/ers220.kin
kinematic_chains=Body
</ERS-220>
kinematic_chains=IR
</ERS-2*>
<ERS-7>
kinematics=/config/ers7.kin
kinematic_chains=Body
kinematic_chains=Mouth
kinematic_chains=NearIR
kinematic_chains=FarIR
kinematic_chains=ChestIR
</ERS-7>
kinematic_chains=LFr
kinematic_chains=RFr
kinematic_chains=LBk
kinematic_chains=RBk
kinematic_chains=Camera

# These values indicate the ratio of actual movement to commanded
# So .9 means it moves 90% as far as it was supposed to.
# This is then used both to calibrate joint values sent to the
# system, as well as sensor values which are received back.
# An unspecified joint is by default '1' which will then pass values
# through unmodified.  Only PID joints are calibrated (i.e. LEDs and
# ears are not)
<ERS-7>
calibrate:LFr:rotor=1.0
calibrate:LFr:elvtr=1.0
calibrate:LFr:knee~=1.0
#...
#The calibration I performed doesn't seem to hold up well, so
#I'm leaving these all at 1.0.  Perhaps there is a constant
#offset involved?  To be continued...
</ERS-7>
<ERS-2*>
#ERS-2xx seems to be fairly well calibrated by system, but
#you can always try to do better...
</ERS-2*>

# Sounds to play when turning estop on and off
estop_on_snd=skid.wav
estop_off_snd=yap.wav

# These values are used by some behaviors to limit the
# speed of the head to reduce wear on the joints
# Units: radians per second
<ERS-2*>
max_head_tilt_speed=2.1
max_head_pan_speed=3.0
max_head_roll_speed=3.0
</ERS-2*>
<ERS-7>
#the pan speed is revised down from Sony's maximum a bit
max_head_tilt_speed=3.18522588
max_head_pan_speed=5.78140315
max_head_roll_speed=5.78140315
</ERS-7>

# If non-zero, robot should attempt to change directions instantaniously
# If zero, robot should change directions more fluidly (following some internal acceleration calibration)
inf_walk_accel=0

console_port=10003
stderr_port=10004



##################################################################
##################################################################
[Sound]
##################################################################
##################################################################
root=data/sound
# volume = mute | level_1 | level_2 | level_3 | <direct dB setting: 0x8000 - 0xFFFF>
# if you directly set the decibel level, be warned sony recommends against going above 0xF600
# However, I believe the commercial software on the ERS-7 runs at 0xFF00
# going above 0xF800 on a ERS-210 causes distortion (clipping) - full volume on a ERS-7 sounds fine though.
volume=level_3

# Sound playback currently requires all sounds to be the same bit
# rate.  Aperios further requires only either 8bit/8KHz or 16bit/16KHz
# formats
sample_rate=16000
sample_bits=16

# Preload is a list of sounds to cache at boot
# can be either root relative or full path
preload=skid.wav
preload=yap.wav

# Pitch detection confidence threshold [0-1]
# Determines how liberal the pitch detector is at generating PitchEvents
pitchConfidenceThreshold=0.6

# Audio streaming settings
# Audio from the AIBO's microphones
streaming.mic_port=10070
streaming.mic_sample_rate=16000
streaming.mic_bits=16
streaming.mic_stereo=true

# Audio to the AIBO's speakers
streaming.speaker_port=10071
# Length of the speaker streaming buffer (ms)
# Streamed samples are sent to the sound manager in packets of this length
streaming.speaker_frame_len=64
# Maximum delay (ms) during playback of received samples
# If the playback queue gets longer it is emptied.
streaming.speaker_max_delay=1000

