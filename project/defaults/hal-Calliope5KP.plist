<?xml version="1.0"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0"><dict>
<!--======== CommPorts ========-->
<!--Communication portals for use by device drivers-->
<key>CommPorts</key> <dict>
	<!--======== CreateSerial ========-->
	<key>CreateSerial</key>  <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key>    <string>SerialCommPort</string>
	
		<!--Baud: Communication frequency (bits per second)-->
		<key>Baud</key>     <integer>57600</integer>
	
		<!--DataBits: Number of data bits to send at a time (5-8)-->
		<key>DataBits</key> <integer>8</integer>
	
		<!--Mode bitmask to pass to the open() call, defaults to 'w+b': in|out|trunc|binary (see std::ios_base::openmode)-->
		<key>Mode</key>     <integer>60</integer>
	
		<!--Parity bit can be sent for error checking
		Value is one of: { EVEN | ODD | NONE } -->
		<key>Parity</key>   <string>NONE</string>
	
		<!--Path of file system object being accessed-->
		<key>Path</key>     <string>/dev/ttyUSB0</string>
	
		<!--StopBits: Number of stop bits to send between data bits (1-2)-->
		<key>StopBits</key> <integer>1</integer>
	
		<!--TTYFlags: Additional configuration string to pass to stty
		(may not work when using non-standard baud rates on OS X)-->
		<key>TTYFlags</key> <string></string>
	</dict>

	<!--======== USB2DynamixelAX ========-->
	<key>USB2DynamixelAX</key>  <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key>    <string>SerialCommPort</string>
	
		<!--Baud: Communication frequency (bits per second)-->
		<key>Baud</key>     <integer>1000000</integer>
	
		<!--DataBits: Number of data bits to send at a time (5-8)-->
		<key>DataBits</key> <integer>8</integer>
	
		<!--Mode bitmask to pass to the open() call, defaults to 'w+b': in|out|trunc|binary (see std::ios_base::openmode)-->
		<key>Mode</key>     <integer>60</integer>
	
		<!--Parity bit can be sent for error checking
		Value is one of: { EVEN | ODD | NONE } -->
		<key>Parity</key>   <string>NONE</string>
	
		<!--Path of file system object being accessed-->
		<key>Path</key>     <string>/dev/ttyUSB1</string>
	
		<!--StopBits: Number of stop bits to send between data bits (1-2)-->
		<key>StopBits</key> <integer>1</integer>
	
		<!--TTYFlags: Additional configuration string to pass to stty
		(may not work when using non-standard baud rates on OS X)-->
		<key>TTYFlags</key> <string></string>
	</dict>
	<!--======== USB2DynamixelRX ========-->
	<key>USB2DynamixelRX</key>  <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key>    <string>SerialCommPort</string>
	
		<!--Baud: Communication frequency (bits per second)-->
		<key>Baud</key>     <integer>1000000</integer>
	
		<!--DataBits: Number of data bits to send at a time (5-8)-->
		<key>DataBits</key> <integer>8</integer>
	
		<!--Mode bitmask to pass to the open() call, defaults to 'w+b': in|out|trunc|binary (see std::ios_base::openmode)-->
		<key>Mode</key>     <integer>60</integer>
	
		<!--Parity bit can be sent for error checking
		Value is one of: { EVEN | ODD | NONE } -->
		<key>Parity</key>   <string>NONE</string>
	
		<!--Path of file system object being accessed-->
		<key>Path</key>     <string>/dev/ttyUSB2</string>
	
		<!--StopBits: Number of stop bits to send between data bits (1-2)-->
		<key>StopBits</key> <integer>1</integer>
	
		<!--TTYFlags: Additional configuration string to pass to stty
		(may not work when using non-standard baud rates on OS X)-->
		<key>TTYFlags</key> <string></string>
	</dict>

</dict>

<!--======== Drivers ========-->
<!--Settings for device drivers-->
<key>Drivers</key> <dict>
	<!--======== Create ========-->
	<key>Create</key> <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key> <string>Create</string>
		
		<!--CommPort: The name of the comm port where output will be sent-->
		<key>CommPort</key> <string>CreateSerial</string>
	</dict>
	
	<!--======== Kinect ========-->
        <key>Kinect</key> <dict>
		<key>.type</key> <string>Kinect</string>
	</dict>

	<!--======== DynamixelAX ========-->
	<key>DynamixelAX</key>  <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key>        <string>Dynamixel</string>
		
		<!--CommPort: The name of the comm port where output will be sent-->
		<key>CommPort</key>     <string>USB2DynamixelAX</string>
		
		<!--======== Servos ========-->
		<!--Maps servo IDs to Tekkotsu output offsets, use command line new/delete commands to add/remove mappings.-->
		<key>Servos</key>       <dict load="sync">
			<key>007</key>  <dict>
				<key>Output</key> <string>ARM:wristrot</string>
				<key>LED</key> <string/>
			</dict>
			<key>008</key>  <dict>
				<key>Output</key> <string>ARM:gripperLeft</string>
				<key>LED</key> <string/>
			</dict>
			<key>009</key>  <dict>
				<key>Output</key> <string>ARM:gripperRight</string>
				<key>LED</key> <string/>
			</dict>
		</dict>
	</dict>
	<!--======== DynamixelRX ========-->
	<key>DynamixelRX</key>  <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key>        <string>Dynamixel</string>
		
		<!--CommPort: The name of the comm port where output will be sent-->
		<key>CommPort</key>     <string>USB2DynamixelRX</string>
		
		<!--======== Servos ========-->
		<!--Maps servo IDs to Tekkotsu output offsets, use command line new/delete commands to add/remove mappings.-->
		<key>Servos</key>       <dict load="sync">
			<key>001</key>  <dict>
				<key>Output</key> <string>NECK:pan</string>
				<key>LED</key> <string/>
				<key>FreeSpinOutput</key> <string/> <!-- By default, Dynamixel driver would try to use this as a wheel, have to override -->
			</dict>
			<key>002</key>  <dict>
				<key>Output</key> <string>NECK:tilt</string>
				<key>LED</key> <string/>
				<key>FreeSpinOutput</key> <string/> <!-- By default, Dynamixel driver would try to use this as a wheel, have to override -->
			</dict>
			<key>003</key>  <dict>
				<key>Output</key> <string>ARM:base</string>
				<key>LED</key> <string/>
			</dict>
			<key>004</key>  <dict>
				<key>Output</key> <string>ARM:shoulder</string>
				<key>LED</key> <string/>
			</dict>
			<key>005</key>  <dict>
				<key>Output</key> <string>ARM:elbow</string>
				<key>LED</key> <string/>
			</dict>
			<key>006</key>  <dict>
				<key>Output</key> <string>ARM:wrist</string>
				<key>LED</key> <string/>
			</dict>
		</dict>
	</dict>

</dict>

<!--======== Sensors ========-->
<!--Settings for the loading of sensor values-->
<key>Sensors</key>         <dict>
	<key>Sources</key>    <array>
				<string>Create</string>
				<string>DynamixelAX</string>
				<string>DynamixelRX</string>
			      </array>
</dict>

<!--======== Vision ========-->
<!--Settings for the loading of camera frames-->
<key>Vision</key> <dict>
	
	<!--======== Sources ========-->
	<key>Sources</key> <array> <string>Kinect.Camera</string> <string>Kinect.Depth</string> </array>
	
	<!--Framerate: The rate at which data should be loaded.  This is a hint to the hardware devices, which generally use their 'native' framerate, but may use this to limit data flow.-->
	<key>Framerate</key> <real>25</real>
	
	<!--Heartbeat: If enabled, an empty "heartbeat" message is sent at the appropriate framerate, even if no data is being processed (i.e. frozen, no data loaded, or out of frames); this will cause an update event within the simulator, repeating processing on the previous data.-->
	<key>Heartbeat</key> <false/>
</dict>

<key>WaitForSensors</key> <false/>
</dict></plist>
